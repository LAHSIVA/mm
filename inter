'''
import numpy as np
import matplotlib.pyplot as plt
def lagrange_interpolation(x,y,x_eval):   
    n=len(x)
    result=0
    for i in range(n):
        term=y[i]
        for j in range(n):
            if j!=i:
                term*=(x_eval-x[j])/(x[i]-x[j])
        result+=term
    return result

x=np.array([10,20,30,40,50,60,70,80,90])
y=np.array([19,57,94,134,173,216,256,297,343])
test_points=[11,17,85]
for i in range(len(test_points)):
    x_eval=test_points[i]
    print(lagrange_interpolation(x,y,x_eval))
    
x_dense=np.linspace(min(x),max(x),500)
y_dense=[lagrange_interpolation(x, y, xi) for xi in x_dense]
plt.plot(x_dense,y_dense)

interp_values=[lagrange_interpolation(x,y,xi) for xi in test_points]
plt.plot(test_points,interp_values)

poly_coeffs=np.polyfit(x,y,3)
true_values=[np.polyval(poly_coeffs,xi) for xi in test_points]

for xi,interp,true in zip(test_points,interp_values,true_values):
    abs_error=(true-interp)
    print(abs_error)
    
'''


'''
import numpy as np 
def divided_difference(x,y,x_eval):    
    n=len(x)
    diff_table=np.zeros((n,n))
    diff_table[:,0]=y
    
    for j in range(1,n):
        for i in range(n-j):
            diff_table[i][j]=diff_table[i+1][j-1]-diff_table[i][j-1]/(x[i+j]-x[i])
    print(diff_table)
    
    result=y[0]
    term=1
    for j in range(1,n):
        term*=(x_eval-x[j-1])
        result+=term*diff_table[0][j]
    return result
x=np.array([10,20,30,40,50,60,70,80,90])
y=np.array([19,57,94,134,173,216,256,297,343])
test=[15,29,31]
for i in range(len(test)):
    x_eval=test[i]
    print(divided_difference(x,y,x_eval))
'''


'''
import numpy as np

def newton_forward(x,y,x_eval):
    n=len(x)
    h=x[1]-x[0]
    diff_table=np.zeros((n,n))
    diff_table[:, 0] = y
    for j in range(1, n):
        for i in range(n - j):
            diff_table[i][j] = diff_table[i+1][j-1] - diff_table[i][j-1]
    print(diff_table)
    
    # Newton forward formula
    u = (x_eval - x[0]) / h
    result = y[0]
    u_term = 1
    fact = 1
    for j in range(1, n):
        u_term *= (u - (j - 1))
        fact *= j
        result += (u_term / fact) * diff_table[0][j]

    return result
x=np.array([10,20,30,40,50,60,70,80,90])
y=np.array([19,57,94,134,173,216,256,297,343])
test=[15,29,31]
for i in range(len(test)):
    x_eval=test[i]
    print(newton_forward(x,y,x_eval))
'''


'''
import numpy as np

def newton_backward(x,y,x_eval):
    n=len(x)
    h=x[1]-x[0]
    # Backward difference table
    diff_table = np.zeros((n, n))
    diff_table[:, 0] = y
    for j in range(1, n):
        for i in range(j, n):
            diff_table[i][j] = diff_table[i][j-1] - diff_table[i-1][j-1]
    print(diff_table)
            
    # Newton backward formula
    u = (x_eval - x[-1]) / h
    result = y[-1]
    u_term = 1
    fact = 1
    for j in range(1, n):
        u_term *= (u + (j - 1))
        fact *= j
        result += (u_term / fact) * diff_table[-1][j]

    return result

x=np.array([10,20,30,40,50,60,70,80,90])
y=np.array([19,57,94,134,173,216,256,297,343])
test=[15,29,31]
for i in range(len(test)):
    x_eval=test[i]
    print(newton_backward(x,y,x_eval))
'''
