import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def calculate_acf(series, max_lag):
    n = len(series)
    series_mean = series.mean()
    
    autocovariances = []
    for k in range(max_lag + 1):
        shifted_series = series.shift(k)
        
        numerator = ((series - series_mean) * (shifted_series - series_mean)).sum()
        
        covariance = numerator / n
        autocovariances.append(covariance)
        
    variance = autocovariances[0]
    
    acf_values = [cov / variance for cov in autocovariances]
    
    return acf_values, autocovariances

def calculate_pacf(acf_values, max_lag):
    pacf_values = [1.0]
    
    for k in range(1, max_lag + 1):
        P_k = np.zeros((k, k))
        for i in range(k):
            for j in range(k):
                P_k[i, j] = acf_values[abs(i - j)]
        
        rho_k = np.array(acf_values[1 : k + 1])
        
        try:
            phi_k = np.linalg.solve(P_k, rho_k)
          
            pacf_at_k = phi_k[-1]
            pacf_values.append(pacf_at_k)
        except np.linalg.LinAlgError:
          
            pacf_values.append(np.nan)
            
    return pacf_values

def perform_significance_testing(values, n, title):
    
    conf_limit = 2 / np.sqrt(n)
    
    print(f"\n--- {title} VALUES WITH SIGNIFICANCE TESTING ---")
    print("=" * 65)
    print(f"{'Lag':<6} {title:<10} {'Significant?':<12} {'Decision':<40}")
    print("-" * 65)
    
    for lag, val in enumerate(values):
        if lag == 0:
            significant, decision = "N/A", f"{title}(0) = 1 (by definition)"
        else:
            if abs(val) > conf_limit:
                significant = "Yes"
                decision = "Reject H0: Correlation is significant"
            else:
                significant = "No"
                decision = "Fail to reject H0: Not significant"
        print(f"{lag:<6} {val:<10.4f} {significant:<12} {decision:<40}")

def plot_correlation(values, n, title, ylabel):
    
    conf_limit = 2 / np.sqrt(n)
    lags = range(len(values))
    
    plt.figure(figsize=(10, 6))
    
    plt.stem(lags, values)
    
    plt.axhline(0, color='black', linewidth=0.8)
    
    plt.axhline(conf_limit, color='red', linestyle='--', linewidth=1, label='95% Confidence Interval')
    plt.axhline(-conf_limit, color='red', linestyle='--', linewidth=1)
    
    plt.title(title, fontsize=16)
    plt.xlabel("Lag", fontsize=12)
    plt.ylabel(ylabel, fontsize=12)
    plt.xticks(np.arange(0, len(values), 2))
    plt.legend()
    plt.grid(True, linestyle='--', alpha=0.5)
    plt.show()

def main():
    
    y_series = pd.Series([
        29, 20, 25, 29, 31, 33, 34, 27, 26, 30,
        29, 28, 28, 26, 27, 26, 30, 28, 26, 30,
        31, 30, 37, 30, 33, 31, 27, 33, 37, 29,
        28, 30, 29, 34, 30, 20, 17, 23, 24, 34,
        36, 35, 33, 29, 25, 27, 30, 29, 28, 32
    ])
    max_lag = 25
    n_observations = len(y_series)

    acf, covariances = calculate_acf(y_series, max_lag)
    
    pacf = calculate_pacf(acf, max_lag)
    
    print("--- Summary of ACF and PACF Calculations ---")
    results_df = pd.DataFrame({
        'Lag': range(max_lag + 1),
        'Autocovariance': covariances,
        'ACF': acf,
        'PACF': pacf
    })
    print(results_df.to_string(index=False, float_format="%.4f"))
    
    perform_significance_testing(acf, n_observations, "ACF")
    perform_significance_testing(pacf, n_observations, "PACF")

    plot_correlation(acf, n_observations, 'Autocorrelation Function (ACF)', 'ACF Value')
    plot_correlation(pacf, n_observations, 'Partial Autocorrelation Function (PACF)', 'PACF Value')

if __name__ == "__main__":
    main()
